```{r}
library(tidyverse)
library(readr)

billboard <- read.csv("music_dataset.csv")
view(billboard)

```

```{r}
# Amount of each artists in the dataset 
artist_sum <- billboard %>%
  group_by(Artist) %>%
  summarise(n = n()) %>%
  mutate(percent = (n / 4850)*100) %>%
  arrange(desc(n)) %>%
  slice(c(1:5, (n() - 4):n())) %>% # cleaner way to slice top and bottom 5
  mutate(rank_group = if_else(row_number() <= 5, "Top 5", "Bottom 5"))

ggplot(artist_sum, aes(x = Artist, y = n, fill = rank_group)) +
  geom_bar(width = 1, stat = "identity") +
  facet_wrap(~rank_group) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


artist_sum %>%
  filter(rank_group == "Top 5") %>%
  ggplot(aes(x = Artist, y = n, fill = rank_group)) +
  geom_bar(stat = "identity") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Top 5 Artists", x = "Artist", y = "Count", fill = "Rank")

artist_sum %>%
  filter(rank_group == "Bottom 5") %>%
  ggplot(aes(x = Artist, y = n, fill = rank_group)) +
  geom_bar(stat = "identity", fill = "Blue") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Bottom 5 Artists", x = "Artist", y = "Count", fill = "Rank")

billboard %>%
  filter(Song == "Track 10330")

billboard %>%
  group_by(Song) %>%
  summarise(n = n())


gen_sum <- billboard %>%
  group_by(Genre) %>%
  summarise(n = n()) 

top_bottom_artists <- billboard %>%
  count(Artist, sort = TRUE) %>%
  slice(c(1:5, (n() - 4):n())) %>%
  mutate(rank_group = if_else(row_number() <= 5, "Top 5", "Bottom 5"))

  
billboard_ranked <- billboard %>%
  inner_join(top_bottom_artists, by = "Artist")

top5_peaks <- billboard_ranked %>%
  filter(rank_group %in% "Top 5") %>% group_by(Artist, peak.position) %>%
  summarise(n = n(), .groups = "drop")

```

## Kmeans Process 
```{r}
library(tidyverse)
library(factoextra)

# Cleaning the dataset
tidy <- janitor::clean_names(billboard)

# Kmeans work for nuermic values, so you pick the numeric values. 
# Unsupervised, so I did not add peak.poistion

billboard_numeric <- tidy %>%
  select(streams, daily_streams, weeks_on_chart,
         lyrics_sentiment, tik_tok_virality,
         danceability, acousticness, energy)

# Remove any missing values
billboard_numeric <- na.omit(billboard_numeric)

# Scale numeric features
billboard_scaled <- scale(billboard_numeric)

```

```{r}
set.seed(3)

km_result <- kmeans(billboard_scaled, centers = 5, nstart = 25)
```

```{r}
billboard_clustered <- tidy %>%
  filter(complete.cases(streams, daily_streams, weeks_on_chart,
                        lyrics_sentiment, tik_tok_virality,
                        danceability, acousticness, energy)) %>%
  mutate(cluster = factor(km_result$cluster))
```



```{r}
fviz_cluster(km_result, data = billboard_scaled,
             ellipse.type = "convex",
             geom = "point",
             palette = "jco",
             ggtheme = theme_minimal())
```
```{r}
billboard_clustered %>%
  group_by(cluster) %>%
  summarise(across(where(is.numeric), mean, na.rm = TRUE),
            n = n())
```

```{r}
set.seed (2)
x <- matrix(rnorm (50 * 2), ncol = 2)
x[1:25 , 1] <- x[1:25 , 1] + 3
x[1:25 , 2] <- x[1:25 , 2] - 4
```

```{r}
km.out <- kmeans(x, 2, nstart = 20)
```

```{r}
par(mfrow = c(1, 2))

plot(
  x,
  col = (km.out$cluster + 1),
  main = "K-Means Clustering Results with K = 2",
  xlab = "",
  ylab = "",
  pch = 20,
  cex = 2)
```

